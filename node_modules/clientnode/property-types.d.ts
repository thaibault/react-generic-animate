import PropTypes from 'prop-types';
import { ValueOf } from './type';
export declare const NullSymbol: unique symbol;
export declare const UndefinedSymbol: unique symbol;
export declare const RealTypes: {
    readonly any: PropTypes.Requireable<any>;
    readonly array: PropTypes.Requireable<any[]>;
    readonly arrayOf: typeof PropTypes.arrayOf;
    readonly bool: PropTypes.Requireable<boolean>;
    readonly boolean: PropTypes.Requireable<boolean>;
    readonly element: PropTypes.Requireable<PropTypes.ReactElementLike>;
    readonly elementType: PropTypes.Requireable<PropTypes.ReactComponentLike>;
    readonly exact: typeof PropTypes.exact;
    readonly func: PropTypes.Requireable<(...args: any[]) => any>;
    readonly instanceOf: typeof PropTypes.instanceOf;
    readonly node: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    readonly number: PropTypes.Requireable<number>;
    readonly object: PropTypes.Requireable<object>;
    readonly objectOf: typeof PropTypes.objectOf;
    readonly oneOf: typeof PropTypes.oneOf;
    readonly oneOfType: typeof PropTypes.oneOfType;
    readonly shape: typeof PropTypes.shape;
    readonly string: PropTypes.Requireable<string>;
    readonly symbol: PropTypes.Requireable<symbol>;
};
export declare const createDummy: (result?: Error | null) => ValueOf<typeof RealTypes>;
/**
 * Dummy validation class.
 * @property message - Holds error message as string.
 */
export declare class ValidationError extends Function {
    message: string;
    /**
     * Initializes dummy validation error instance.
     */
    constructor();
}
export declare const DummyTypes: {
    readonly any: ValueOf<{
        readonly any: PropTypes.Requireable<any>;
        readonly array: PropTypes.Requireable<any[]>;
        readonly arrayOf: typeof PropTypes.arrayOf;
        readonly bool: PropTypes.Requireable<boolean>;
        readonly boolean: PropTypes.Requireable<boolean>;
        readonly element: PropTypes.Requireable<PropTypes.ReactElementLike>;
        readonly elementType: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        readonly exact: typeof PropTypes.exact;
        readonly func: PropTypes.Requireable<(...args: any[]) => any>;
        readonly instanceOf: typeof PropTypes.instanceOf;
        readonly node: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        readonly number: PropTypes.Requireable<number>;
        readonly object: PropTypes.Requireable<object>;
        readonly objectOf: typeof PropTypes.objectOf;
        readonly oneOf: typeof PropTypes.oneOf;
        readonly oneOfType: typeof PropTypes.oneOfType;
        readonly shape: typeof PropTypes.shape;
        readonly string: PropTypes.Requireable<string>;
        readonly symbol: PropTypes.Requireable<symbol>;
    }>;
    readonly array: ValueOf<{
        readonly any: PropTypes.Requireable<any>;
        readonly array: PropTypes.Requireable<any[]>;
        readonly arrayOf: typeof PropTypes.arrayOf;
        readonly bool: PropTypes.Requireable<boolean>;
        readonly boolean: PropTypes.Requireable<boolean>;
        readonly element: PropTypes.Requireable<PropTypes.ReactElementLike>;
        readonly elementType: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        readonly exact: typeof PropTypes.exact;
        readonly func: PropTypes.Requireable<(...args: any[]) => any>;
        readonly instanceOf: typeof PropTypes.instanceOf;
        readonly node: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        readonly number: PropTypes.Requireable<number>;
        readonly object: PropTypes.Requireable<object>;
        readonly objectOf: typeof PropTypes.objectOf;
        readonly oneOf: typeof PropTypes.oneOf;
        readonly oneOfType: typeof PropTypes.oneOfType;
        readonly shape: typeof PropTypes.shape;
        readonly string: PropTypes.Requireable<string>;
        readonly symbol: PropTypes.Requireable<symbol>;
    }>;
    readonly arrayOf: ValueOf<{
        readonly any: PropTypes.Requireable<any>;
        readonly array: PropTypes.Requireable<any[]>;
        readonly arrayOf: typeof PropTypes.arrayOf;
        readonly bool: PropTypes.Requireable<boolean>;
        readonly boolean: PropTypes.Requireable<boolean>;
        readonly element: PropTypes.Requireable<PropTypes.ReactElementLike>;
        readonly elementType: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        readonly exact: typeof PropTypes.exact;
        readonly func: PropTypes.Requireable<(...args: any[]) => any>;
        readonly instanceOf: typeof PropTypes.instanceOf;
        readonly node: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        readonly number: PropTypes.Requireable<number>;
        readonly object: PropTypes.Requireable<object>;
        readonly objectOf: typeof PropTypes.objectOf;
        readonly oneOf: typeof PropTypes.oneOf;
        readonly oneOfType: typeof PropTypes.oneOfType;
        readonly shape: typeof PropTypes.shape;
        readonly string: PropTypes.Requireable<string>;
        readonly symbol: PropTypes.Requireable<symbol>;
    }>;
    readonly bool: ValueOf<{
        readonly any: PropTypes.Requireable<any>;
        readonly array: PropTypes.Requireable<any[]>;
        readonly arrayOf: typeof PropTypes.arrayOf;
        readonly bool: PropTypes.Requireable<boolean>;
        readonly boolean: PropTypes.Requireable<boolean>;
        readonly element: PropTypes.Requireable<PropTypes.ReactElementLike>;
        readonly elementType: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        readonly exact: typeof PropTypes.exact;
        readonly func: PropTypes.Requireable<(...args: any[]) => any>;
        readonly instanceOf: typeof PropTypes.instanceOf;
        readonly node: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        readonly number: PropTypes.Requireable<number>;
        readonly object: PropTypes.Requireable<object>;
        readonly objectOf: typeof PropTypes.objectOf;
        readonly oneOf: typeof PropTypes.oneOf;
        readonly oneOfType: typeof PropTypes.oneOfType;
        readonly shape: typeof PropTypes.shape;
        readonly string: PropTypes.Requireable<string>;
        readonly symbol: PropTypes.Requireable<symbol>;
    }>;
    readonly boolean: ValueOf<{
        readonly any: PropTypes.Requireable<any>;
        readonly array: PropTypes.Requireable<any[]>;
        readonly arrayOf: typeof PropTypes.arrayOf;
        readonly bool: PropTypes.Requireable<boolean>;
        readonly boolean: PropTypes.Requireable<boolean>;
        readonly element: PropTypes.Requireable<PropTypes.ReactElementLike>;
        readonly elementType: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        readonly exact: typeof PropTypes.exact;
        readonly func: PropTypes.Requireable<(...args: any[]) => any>;
        readonly instanceOf: typeof PropTypes.instanceOf;
        readonly node: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        readonly number: PropTypes.Requireable<number>;
        readonly object: PropTypes.Requireable<object>;
        readonly objectOf: typeof PropTypes.objectOf;
        readonly oneOf: typeof PropTypes.oneOf;
        readonly oneOfType: typeof PropTypes.oneOfType;
        readonly shape: typeof PropTypes.shape;
        readonly string: PropTypes.Requireable<string>;
        readonly symbol: PropTypes.Requireable<symbol>;
    }>;
    readonly element: ValueOf<{
        readonly any: PropTypes.Requireable<any>;
        readonly array: PropTypes.Requireable<any[]>;
        readonly arrayOf: typeof PropTypes.arrayOf;
        readonly bool: PropTypes.Requireable<boolean>;
        readonly boolean: PropTypes.Requireable<boolean>;
        readonly element: PropTypes.Requireable<PropTypes.ReactElementLike>;
        readonly elementType: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        readonly exact: typeof PropTypes.exact;
        readonly func: PropTypes.Requireable<(...args: any[]) => any>;
        readonly instanceOf: typeof PropTypes.instanceOf;
        readonly node: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        readonly number: PropTypes.Requireable<number>;
        readonly object: PropTypes.Requireable<object>;
        readonly objectOf: typeof PropTypes.objectOf;
        readonly oneOf: typeof PropTypes.oneOf;
        readonly oneOfType: typeof PropTypes.oneOfType;
        readonly shape: typeof PropTypes.shape;
        readonly string: PropTypes.Requireable<string>;
        readonly symbol: PropTypes.Requireable<symbol>;
    }>;
    readonly elementType: ValueOf<{
        readonly any: PropTypes.Requireable<any>;
        readonly array: PropTypes.Requireable<any[]>;
        readonly arrayOf: typeof PropTypes.arrayOf;
        readonly bool: PropTypes.Requireable<boolean>;
        readonly boolean: PropTypes.Requireable<boolean>;
        readonly element: PropTypes.Requireable<PropTypes.ReactElementLike>;
        readonly elementType: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        readonly exact: typeof PropTypes.exact;
        readonly func: PropTypes.Requireable<(...args: any[]) => any>;
        readonly instanceOf: typeof PropTypes.instanceOf;
        readonly node: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        readonly number: PropTypes.Requireable<number>;
        readonly object: PropTypes.Requireable<object>;
        readonly objectOf: typeof PropTypes.objectOf;
        readonly oneOf: typeof PropTypes.oneOf;
        readonly oneOfType: typeof PropTypes.oneOfType;
        readonly shape: typeof PropTypes.shape;
        readonly string: PropTypes.Requireable<string>;
        readonly symbol: PropTypes.Requireable<symbol>;
    }>;
    readonly exact: ValueOf<{
        readonly any: PropTypes.Requireable<any>;
        readonly array: PropTypes.Requireable<any[]>;
        readonly arrayOf: typeof PropTypes.arrayOf;
        readonly bool: PropTypes.Requireable<boolean>;
        readonly boolean: PropTypes.Requireable<boolean>;
        readonly element: PropTypes.Requireable<PropTypes.ReactElementLike>;
        readonly elementType: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        readonly exact: typeof PropTypes.exact;
        readonly func: PropTypes.Requireable<(...args: any[]) => any>;
        readonly instanceOf: typeof PropTypes.instanceOf;
        readonly node: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        readonly number: PropTypes.Requireable<number>;
        readonly object: PropTypes.Requireable<object>;
        readonly objectOf: typeof PropTypes.objectOf;
        readonly oneOf: typeof PropTypes.oneOf;
        readonly oneOfType: typeof PropTypes.oneOfType;
        readonly shape: typeof PropTypes.shape;
        readonly string: PropTypes.Requireable<string>;
        readonly symbol: PropTypes.Requireable<symbol>;
    }>;
    readonly func: ValueOf<{
        readonly any: PropTypes.Requireable<any>;
        readonly array: PropTypes.Requireable<any[]>;
        readonly arrayOf: typeof PropTypes.arrayOf;
        readonly bool: PropTypes.Requireable<boolean>;
        readonly boolean: PropTypes.Requireable<boolean>;
        readonly element: PropTypes.Requireable<PropTypes.ReactElementLike>;
        readonly elementType: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        readonly exact: typeof PropTypes.exact;
        readonly func: PropTypes.Requireable<(...args: any[]) => any>;
        readonly instanceOf: typeof PropTypes.instanceOf;
        readonly node: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        readonly number: PropTypes.Requireable<number>;
        readonly object: PropTypes.Requireable<object>;
        readonly objectOf: typeof PropTypes.objectOf;
        readonly oneOf: typeof PropTypes.oneOf;
        readonly oneOfType: typeof PropTypes.oneOfType;
        readonly shape: typeof PropTypes.shape;
        readonly string: PropTypes.Requireable<string>;
        readonly symbol: PropTypes.Requireable<symbol>;
    }>;
    readonly instanceOf: ValueOf<{
        readonly any: PropTypes.Requireable<any>;
        readonly array: PropTypes.Requireable<any[]>;
        readonly arrayOf: typeof PropTypes.arrayOf;
        readonly bool: PropTypes.Requireable<boolean>;
        readonly boolean: PropTypes.Requireable<boolean>;
        readonly element: PropTypes.Requireable<PropTypes.ReactElementLike>;
        readonly elementType: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        readonly exact: typeof PropTypes.exact;
        readonly func: PropTypes.Requireable<(...args: any[]) => any>;
        readonly instanceOf: typeof PropTypes.instanceOf;
        readonly node: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        readonly number: PropTypes.Requireable<number>;
        readonly object: PropTypes.Requireable<object>;
        readonly objectOf: typeof PropTypes.objectOf;
        readonly oneOf: typeof PropTypes.oneOf;
        readonly oneOfType: typeof PropTypes.oneOfType;
        readonly shape: typeof PropTypes.shape;
        readonly string: PropTypes.Requireable<string>;
        readonly symbol: PropTypes.Requireable<symbol>;
    }>;
    readonly node: ValueOf<{
        readonly any: PropTypes.Requireable<any>;
        readonly array: PropTypes.Requireable<any[]>;
        readonly arrayOf: typeof PropTypes.arrayOf;
        readonly bool: PropTypes.Requireable<boolean>;
        readonly boolean: PropTypes.Requireable<boolean>;
        readonly element: PropTypes.Requireable<PropTypes.ReactElementLike>;
        readonly elementType: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        readonly exact: typeof PropTypes.exact;
        readonly func: PropTypes.Requireable<(...args: any[]) => any>;
        readonly instanceOf: typeof PropTypes.instanceOf;
        readonly node: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        readonly number: PropTypes.Requireable<number>;
        readonly object: PropTypes.Requireable<object>;
        readonly objectOf: typeof PropTypes.objectOf;
        readonly oneOf: typeof PropTypes.oneOf;
        readonly oneOfType: typeof PropTypes.oneOfType;
        readonly shape: typeof PropTypes.shape;
        readonly string: PropTypes.Requireable<string>;
        readonly symbol: PropTypes.Requireable<symbol>;
    }>;
    readonly number: ValueOf<{
        readonly any: PropTypes.Requireable<any>;
        readonly array: PropTypes.Requireable<any[]>;
        readonly arrayOf: typeof PropTypes.arrayOf;
        readonly bool: PropTypes.Requireable<boolean>;
        readonly boolean: PropTypes.Requireable<boolean>;
        readonly element: PropTypes.Requireable<PropTypes.ReactElementLike>;
        readonly elementType: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        readonly exact: typeof PropTypes.exact;
        readonly func: PropTypes.Requireable<(...args: any[]) => any>;
        readonly instanceOf: typeof PropTypes.instanceOf;
        readonly node: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        readonly number: PropTypes.Requireable<number>;
        readonly object: PropTypes.Requireable<object>;
        readonly objectOf: typeof PropTypes.objectOf;
        readonly oneOf: typeof PropTypes.oneOf;
        readonly oneOfType: typeof PropTypes.oneOfType;
        readonly shape: typeof PropTypes.shape;
        readonly string: PropTypes.Requireable<string>;
        readonly symbol: PropTypes.Requireable<symbol>;
    }>;
    readonly object: ValueOf<{
        readonly any: PropTypes.Requireable<any>;
        readonly array: PropTypes.Requireable<any[]>;
        readonly arrayOf: typeof PropTypes.arrayOf;
        readonly bool: PropTypes.Requireable<boolean>;
        readonly boolean: PropTypes.Requireable<boolean>;
        readonly element: PropTypes.Requireable<PropTypes.ReactElementLike>;
        readonly elementType: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        readonly exact: typeof PropTypes.exact;
        readonly func: PropTypes.Requireable<(...args: any[]) => any>;
        readonly instanceOf: typeof PropTypes.instanceOf;
        readonly node: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        readonly number: PropTypes.Requireable<number>;
        readonly object: PropTypes.Requireable<object>;
        readonly objectOf: typeof PropTypes.objectOf;
        readonly oneOf: typeof PropTypes.oneOf;
        readonly oneOfType: typeof PropTypes.oneOfType;
        readonly shape: typeof PropTypes.shape;
        readonly string: PropTypes.Requireable<string>;
        readonly symbol: PropTypes.Requireable<symbol>;
    }>;
    readonly objectOf: ValueOf<{
        readonly any: PropTypes.Requireable<any>;
        readonly array: PropTypes.Requireable<any[]>;
        readonly arrayOf: typeof PropTypes.arrayOf;
        readonly bool: PropTypes.Requireable<boolean>;
        readonly boolean: PropTypes.Requireable<boolean>;
        readonly element: PropTypes.Requireable<PropTypes.ReactElementLike>;
        readonly elementType: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        readonly exact: typeof PropTypes.exact;
        readonly func: PropTypes.Requireable<(...args: any[]) => any>;
        readonly instanceOf: typeof PropTypes.instanceOf;
        readonly node: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        readonly number: PropTypes.Requireable<number>;
        readonly object: PropTypes.Requireable<object>;
        readonly objectOf: typeof PropTypes.objectOf;
        readonly oneOf: typeof PropTypes.oneOf;
        readonly oneOfType: typeof PropTypes.oneOfType;
        readonly shape: typeof PropTypes.shape;
        readonly string: PropTypes.Requireable<string>;
        readonly symbol: PropTypes.Requireable<symbol>;
    }>;
    readonly oneOf: ValueOf<{
        readonly any: PropTypes.Requireable<any>;
        readonly array: PropTypes.Requireable<any[]>;
        readonly arrayOf: typeof PropTypes.arrayOf;
        readonly bool: PropTypes.Requireable<boolean>;
        readonly boolean: PropTypes.Requireable<boolean>;
        readonly element: PropTypes.Requireable<PropTypes.ReactElementLike>;
        readonly elementType: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        readonly exact: typeof PropTypes.exact;
        readonly func: PropTypes.Requireable<(...args: any[]) => any>;
        readonly instanceOf: typeof PropTypes.instanceOf;
        readonly node: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        readonly number: PropTypes.Requireable<number>;
        readonly object: PropTypes.Requireable<object>;
        readonly objectOf: typeof PropTypes.objectOf;
        readonly oneOf: typeof PropTypes.oneOf;
        readonly oneOfType: typeof PropTypes.oneOfType;
        readonly shape: typeof PropTypes.shape;
        readonly string: PropTypes.Requireable<string>;
        readonly symbol: PropTypes.Requireable<symbol>;
    }>;
    readonly oneOfType: ValueOf<{
        readonly any: PropTypes.Requireable<any>;
        readonly array: PropTypes.Requireable<any[]>;
        readonly arrayOf: typeof PropTypes.arrayOf;
        readonly bool: PropTypes.Requireable<boolean>;
        readonly boolean: PropTypes.Requireable<boolean>;
        readonly element: PropTypes.Requireable<PropTypes.ReactElementLike>;
        readonly elementType: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        readonly exact: typeof PropTypes.exact;
        readonly func: PropTypes.Requireable<(...args: any[]) => any>;
        readonly instanceOf: typeof PropTypes.instanceOf;
        readonly node: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        readonly number: PropTypes.Requireable<number>;
        readonly object: PropTypes.Requireable<object>;
        readonly objectOf: typeof PropTypes.objectOf;
        readonly oneOf: typeof PropTypes.oneOf;
        readonly oneOfType: typeof PropTypes.oneOfType;
        readonly shape: typeof PropTypes.shape;
        readonly string: PropTypes.Requireable<string>;
        readonly symbol: PropTypes.Requireable<symbol>;
    }>;
    readonly shape: ValueOf<{
        readonly any: PropTypes.Requireable<any>;
        readonly array: PropTypes.Requireable<any[]>;
        readonly arrayOf: typeof PropTypes.arrayOf;
        readonly bool: PropTypes.Requireable<boolean>;
        readonly boolean: PropTypes.Requireable<boolean>;
        readonly element: PropTypes.Requireable<PropTypes.ReactElementLike>;
        readonly elementType: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        readonly exact: typeof PropTypes.exact;
        readonly func: PropTypes.Requireable<(...args: any[]) => any>;
        readonly instanceOf: typeof PropTypes.instanceOf;
        readonly node: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        readonly number: PropTypes.Requireable<number>;
        readonly object: PropTypes.Requireable<object>;
        readonly objectOf: typeof PropTypes.objectOf;
        readonly oneOf: typeof PropTypes.oneOf;
        readonly oneOfType: typeof PropTypes.oneOfType;
        readonly shape: typeof PropTypes.shape;
        readonly string: PropTypes.Requireable<string>;
        readonly symbol: PropTypes.Requireable<symbol>;
    }>;
    readonly string: ValueOf<{
        readonly any: PropTypes.Requireable<any>;
        readonly array: PropTypes.Requireable<any[]>;
        readonly arrayOf: typeof PropTypes.arrayOf;
        readonly bool: PropTypes.Requireable<boolean>;
        readonly boolean: PropTypes.Requireable<boolean>;
        readonly element: PropTypes.Requireable<PropTypes.ReactElementLike>;
        readonly elementType: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        readonly exact: typeof PropTypes.exact;
        readonly func: PropTypes.Requireable<(...args: any[]) => any>;
        readonly instanceOf: typeof PropTypes.instanceOf;
        readonly node: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        readonly number: PropTypes.Requireable<number>;
        readonly object: PropTypes.Requireable<object>;
        readonly objectOf: typeof PropTypes.objectOf;
        readonly oneOf: typeof PropTypes.oneOf;
        readonly oneOfType: typeof PropTypes.oneOfType;
        readonly shape: typeof PropTypes.shape;
        readonly string: PropTypes.Requireable<string>;
        readonly symbol: PropTypes.Requireable<symbol>;
    }>;
    readonly symbol: ValueOf<{
        readonly any: PropTypes.Requireable<any>;
        readonly array: PropTypes.Requireable<any[]>;
        readonly arrayOf: typeof PropTypes.arrayOf;
        readonly bool: PropTypes.Requireable<boolean>;
        readonly boolean: PropTypes.Requireable<boolean>;
        readonly element: PropTypes.Requireable<PropTypes.ReactElementLike>;
        readonly elementType: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        readonly exact: typeof PropTypes.exact;
        readonly func: PropTypes.Requireable<(...args: any[]) => any>;
        readonly instanceOf: typeof PropTypes.instanceOf;
        readonly node: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        readonly number: PropTypes.Requireable<number>;
        readonly object: PropTypes.Requireable<object>;
        readonly objectOf: typeof PropTypes.objectOf;
        readonly oneOf: typeof PropTypes.oneOf;
        readonly oneOfType: typeof PropTypes.oneOfType;
        readonly shape: typeof PropTypes.shape;
        readonly string: PropTypes.Requireable<string>;
        readonly symbol: PropTypes.Requireable<symbol>;
    }>;
};
export declare const PropertyTypes: typeof RealTypes;
export declare const any: PropTypes.Requireable<any>;
export declare const array: PropTypes.Requireable<any[]>;
export declare const arrayOf: typeof PropTypes.arrayOf;
export declare const bool: PropTypes.Requireable<boolean>;
export declare const boolean: PropTypes.Requireable<boolean>;
export declare const element: PropTypes.Requireable<PropTypes.ReactElementLike>;
export declare const elementType: PropTypes.Requireable<PropTypes.ReactComponentLike>;
export declare const exact: typeof PropTypes.exact;
export declare const func: PropTypes.Requireable<(...args: any[]) => any>;
export declare const instanceOf: typeof PropTypes.instanceOf;
export declare const node: PropTypes.Requireable<PropTypes.ReactNodeLike>;
export declare const number: PropTypes.Requireable<number>;
export declare const object: PropTypes.Requireable<object>;
export declare const objectOf: typeof PropTypes.objectOf;
export declare const oneOf: typeof PropTypes.oneOf;
export declare const oneOfType: typeof PropTypes.oneOfType;
export declare const shape: typeof PropTypes.shape;
export declare const string: PropTypes.Requireable<string>;
export declare const symbol: PropTypes.Requireable<symbol>;
export type { Requireable, ValidationMap, Validator } from 'prop-types';
export default PropertyTypes;
